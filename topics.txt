1) Prototype Inheritance
2) Call, apply, bind
3) Event loop
4) Callbacks and Promises (async/await)
5) map, reduce, filter
6) Classes
7) API Calls
8) Hoisting

9) Event Bubbling/Capturing
	With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements. With capturing, the process is in reverse. We usually attach an event to a handler using the addEventListener function.
	The third argument useCapture is the key. The default value is false. So, it will be a bubbling model where the event is handled by the innermost element first and it propagates outwards till it reaches the parent element. If that argument is true, it is capturing model.
	addEventListener("click", handler, useCapture=false)
	Handling of Bubbling model ⬆️, capturing model ⬇️
	
	https://medium.com/dev-bits/a-perfect-guide-for-cracking-a-javascript-interview-a-developers-perspective-23a5c0fa4d0d

10) Map, Set

11) Recursion
	Base case, recursive case

12) freeze, seal
	Object.freeze - will freeze the keys at that level, throws error in strict mode
		Object.isFrozen(obj)
	Object.seal - Cannot add new or delete property but configure them
		Object.isSealed(obj)

13) error handling patterns

14) Value vs Reference
	Primitives (copied by value)
		null
		undefined
		Number
		String
		Boolean
	Objects (copied by reference)
		Object
		Array
		Function
